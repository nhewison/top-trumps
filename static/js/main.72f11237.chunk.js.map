{"version":3,"sources":["components/TitleSection.js","components/Card.js","components/RulesBox.js","components/CardWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["TitleSection","className","Card","title","poster_path","popularity","runtime","revenue","budget","release_date","compareMovieProperty","isShown","onButtonClick","formatNumber","num","toString","replace","formattedRevenue","formattedBudget","src","onClick","RulesBox","setRulesIsShown","href","CardWrapper","useState","movieOne","setMovieOne","movieTwo","setMovieTwo","result","setResult","revealCardTwo","setRevealCardTwo","rulesIsShown","fetchMovie","a","fetch","Math","floor","random","process","response","json","console","log","getMovie","fetchedData","Boolean","setMovies","useEffect","property","gameConditions","Object","keys","filter","condition","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAUeA,EARM,WACjB,OACI,sBAAKC,UAAU,QAAf,UACI,6CACA,gECkDGC,EAtDF,SAAC,GAA8H,IAA5HC,EAA2H,EAA3HA,MAAOC,EAAoH,EAApHA,YAAaC,EAAuG,EAAvGA,WAAYC,EAA2F,EAA3FA,QAASC,EAAkF,EAAlFA,QAASC,EAAyE,EAAzEA,OAAQC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,qBAAsBC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cAEnH,SAASC,EAAaC,GAClB,OAAOA,EAAIC,WAAWC,QAAQ,0BAA2B,OAG7D,IAAMC,EAAmBV,GAAWM,EAAaN,GAC3CW,EAAkBV,GAAUK,EAAaL,GAE/C,OAAKG,EASD,sBAAKV,UAAWU,EAAQ,OAAQ,mBAAhC,UACI,6BAAKR,IACL,qBAAKgB,IAAG,0CAAqCf,KAC7C,oBAAGgB,QAAS,WACRV,EAAqB,gBACjBE,GACFA,KAHN,2BAKsBH,KACtB,oBAAGW,QAAS,WACRV,EAAqB,cACjBE,GACAA,KAHR,yBAKoBP,KACpB,oBAAGe,QAAS,WACRV,EAAqB,WACjBE,GACAA,KAHR,sBAKiBN,EALjB,WAMA,oBAAGc,QAAS,WACRV,EAAqB,UACjBE,GACAA,KAHR,sBAKiBM,KACjB,oBAAGE,QAAS,WACRV,EAAqB,WACjBE,GACAA,KAHR,wBAKmBK,QAvCnB,qBAAKhB,UAAU,cAAf,SACA,8CCMGoB,EAlBE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAEhB,OACI,qBAAKrB,UAAU,eAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mBAAGmB,QAAS,kBAAME,GAAgB,IAAQC,KAAK,IAAItB,UAAU,eAA7D,eACA,sBAAKA,UAAU,aAAf,UACI,0DACA,sDACA,kEACA,qEACA,uEACA,wFCsGLuB,EA/GK,WAChB,MAAgCC,mBAAS,CAAEtB,MAAO,KAAME,WAAY,KAAMC,QAAS,KAAMC,QAAS,KAAMH,YAAa,OAArH,mBAAOsB,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,CAAEtB,MAAO,KAAME,WAAY,KAAMC,QAAS,KAAMC,QAAS,KAAMH,YAAa,OAArH,mBAAOwB,EAAP,KAAiBC,EAAjB,KACA,EAA4BJ,mBAAS,MAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA0CN,oBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAwCR,oBAAS,GAAjD,mBAAOS,EAAP,KAAqBZ,EAArB,KAIMa,EAAU,uCAAG,4BAAAC,EAAA,+EAEYC,MAAM,sCAAD,OAJTC,KAAKC,MAAsB,IAAhBD,KAAKE,UAIP,oBAAiEC,qCAFlF,cAELC,EAFK,gBAGEA,EAASC,OAHX,iGAMJC,QAAQC,IAAR,OANI,yDAAH,qDAUVC,EAAQ,uCAAG,4BAAAV,EAAA,sEACaD,IADb,UACPY,EADO,QAEaC,QAAQD,EAAY5C,OAAS4C,EAAY1C,YAAc0C,EAAYzC,SAAWyC,EAAYxC,SAAWwC,EAAY3C,aAF9H,yCAGiB2C,GAHjB,uBAIAD,IAJA,mFAAH,qDAORG,EAAS,uCAAG,sBAAAb,EAAA,kEACdT,EADc,SACImB,IADJ,8CAEdjB,EAFc,SAEIiB,IAFJ,8EAAH,qDAKfI,qBAAU,WACND,MACD,IA+DH,OAFAL,QAAQC,IAAI,CAAEnB,WAAUE,aAGpB,sBAAK3B,UAAU,UAAf,UACKiC,GAAgB,cAAC,EAAD,CAAUZ,gBAAiBA,IAC5C,qBAAKrB,UAAU,gBAAf,SAA+B,cAAC,EAAD,MAC/B,sBAAKA,UAAU,eAAf,UACI,cAAC,EAAD,yBAAMU,SAAO,EAACC,cATN,kBAAMqB,GAAiB,KASeP,GAA9C,IAAwDhB,qBA5DvC,SAACyC,GAC1B,GAAiB,eAAbA,EAA2B,CAC3B,IAAMC,EAAiB,CACnB,UAAW1B,EAASrB,WAAauB,EAASvB,WAC1C,wBAAyBqB,EAASrB,aAAeuB,EAASvB,WAC1D,MAASqB,EAASrB,WAAauB,EAASvB,YAEtCyB,EAASuB,OAAOC,KAAKF,GAAgBG,QAAO,SAAAC,GAAS,OAAIJ,EAAeI,MAAY,GAC1FzB,EAAUD,GAEd,GAAiB,YAAbqB,EAAwB,CACxB,IAAMC,EAAiB,CACnB,UAAW1B,EAASpB,QAAUsB,EAAStB,QACvC,yBAA0BoB,EAASpB,UAAYsB,EAAStB,QACxD,MAASoB,EAASpB,QAAUsB,EAAStB,SAEnCwB,EAASuB,OAAOC,KAAKF,GAAgBG,QAAO,SAAAC,GAAS,OAAIJ,EAAeI,MAAY,GAC1FzB,EAAUD,GAGd,GAAiB,YAAbqB,EAAwB,CACxB,IAAMC,EAAiB,CACnB,UAAW1B,EAASnB,QAAUqB,EAASrB,QACvC,0BAA2BmB,EAASnB,UAAYqB,EAASrB,QACzD,MAASmB,EAASnB,QAAUqB,EAASrB,SAEnCuB,EAASuB,OAAOC,KAAKF,GAAgBG,QAAO,SAAAC,GAAS,OAAIJ,EAAeI,MAAY,GAC1FzB,EAAUD,GAGd,GAAiB,WAAbqB,EAAuB,CACvB,IAAMC,EAAiB,CACnB,UAAW1B,EAASlB,OAASoB,EAASpB,OACtC,0BAA2BkB,EAASlB,SAAWoB,EAASpB,OACxD,MAASkB,EAASlB,OAASoB,EAASpB,QAElCsB,EAASuB,OAAOC,KAAKF,GAAgBG,QAAO,SAAAC,GAAS,OAAIJ,EAAeI,MAAY,GAC1FzB,EAAUD,GAGd,GAAiB,iBAAbqB,EAA6B,CAC7B,IAAMC,EAAiB,CACnB,UAAW1B,EAASjB,aAAemB,EAASnB,aAC5C,0BAA2BiB,EAASjB,eAAiBmB,EAASnB,aAC9D,MAASiB,EAASjB,aAAemB,EAASnB,cAExCqB,EAASuB,OAAOC,KAAKF,GAAgBG,QAAO,SAAAC,GAAS,OAAIJ,EAAeI,MAAY,GAC1FzB,EAAUD,QAcN,cAAC,EAAD,aAAMnB,QAASqB,GAAmBJ,OAEtC,sBAAKR,QAAS,kBApElB6B,IACAhB,GAAiB,QACjBF,EAAU,OAkEuB9B,UAAU,SAAvC,cAAiD,+CAChD6B,GAAU,sBAAK7B,UAAU,UAAf,qBAAkC6B,SCrG1C2B,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.72f11237.chunk.js","sourcesContent":["import React from 'react';\n\nconst TitleSection = () => {\n    return (\n        <div className='title'>\n            <h1>Nat's Game.</h1>\n            <p>Like Top Trumps but better.</p>\n        </div>\n    )};\n\nexport default TitleSection","import React from 'react';\n\nconst Card = ({ title, poster_path, popularity, runtime, revenue, budget, release_date, compareMovieProperty, isShown, onButtonClick }) => {\n\n    function formatNumber(num) {\n        return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n    }\n\n    const formattedRevenue = revenue && formatNumber(revenue)\n    const formattedBudget = budget && formatNumber(budget)\n\n    if (!isShown) {\n        return (\n            <div className='placeholder'>   \n            <p>Nat's Game</p>\n            </div>\n        )\n    }\n\n    return (\n        <div className={isShown?'card': 'card placeholder'}>\n            <h2>{title}</h2>\n            <img src={`https://image.tmdb.org/t/p/w500/${poster_path}`}></img>\n            <p onClick={() => {\n                compareMovieProperty(\"release_date\"); \n                if (onButtonClick){\n                  onButtonClick()  \n                }\n                }}>Release Date: {release_date}</p>\n            <p onClick={() => {\n                compareMovieProperty(\"popularity\");\n                if (onButtonClick){\n                    onButtonClick()\n                }\n                }}>Popularity: {popularity}</p>\n            <p onClick={() => {\n                compareMovieProperty(\"runtime\");\n                if (onButtonClick){\n                    onButtonClick()\n                }\n                }}>Runtime: {runtime} mins</p>\n            <p onClick={() => {\n                compareMovieProperty(\"budget\");\n                if (onButtonClick){\n                    onButtonClick()\n                }\n                }}>Budget: ${formattedBudget}</p>\n            <p onClick={() => {\n                compareMovieProperty(\"revenue\");\n                if (onButtonClick){\n                    onButtonClick()\n                }\n                }}> Revenue: ${formattedRevenue}</p>\n        </div >\n    )};\n\nexport default Card\n\n","import React from 'react';\n\nconst RulesBox = ({ setRulesIsShown }) => {\n        \n    return (\n        <div className='rules-window'>\n            <div className='rules-box'>\n                <a onClick={() => setRulesIsShown(false)} href=\"#\" className='close-pop-up'>x</a>\n                <div className='rules-list'>\n                    <h1>Nat's Game: How to play.</h1>\n                    <p>Read your Movie Card.</p>\n                    <p>Pick your highest/best attribute.</p>\n                    <p>If it beats the other card, you win!</p>\n                    <p>If its a tie, or you lose, play again.</p>\n                    <p>Tip: For Release Date, the earlier the better.</p>\n                </div>\n            </div>\n        </div>\n    )};\n\nexport default RulesBox","import React, { useState, useEffect } from 'react';\nimport TitleSection from './TitleSection';\nimport Card from './Card';\nimport RulesBox from './RulesBox'; \n\nconst CardWrapper = () => {\n    const [movieOne, setMovieOne] = useState({ title: null, popularity: null, runtime: null, revenue: null, poster_path: null });\n    const [movieTwo, setMovieTwo] = useState({ title: null, popularity: null, runtime: null, revenue: null, poster_path: null });\n    const [result, setResult] = useState(null);\n    const [revealCardTwo, setRevealCardTwo] = useState(false);\n    const [rulesIsShown, setRulesIsShown] = useState(true);\n\n    const randomNumber = () => Math.floor(Math.random() * 300);\n\n    const fetchMovie = async () => {\n        try {\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${randomNumber()}?api_key=${process.env.REACT_APP_MOVIEDB_KEY}`)\n            return await response.json()\n        }\n        catch (error) {\n            return console.log(error)\n        }\n    }\n\n    const getMovie = async () => {\n        const fetchedData = await fetchMovie();\n        const hasRequiredFields = Boolean(fetchedData.title && fetchedData.popularity && fetchedData.runtime && fetchedData.revenue && fetchedData.poster_path)\n        if (hasRequiredFields) return fetchedData;\n        return await getMovie()\n    }\n\n    const setMovies = async () => {\n        setMovieOne(await getMovie())\n        setMovieTwo(await getMovie())\n    }\n    \n    useEffect(() => {\n        setMovies()\n    }, []) \n\n    const reset = () => {\n        setMovies();\n        setRevealCardTwo(false);\n        setResult(null);\n    }\n\n    const compareMovieProperty = (property) => {\n        if (property === 'popularity') {\n            const gameConditions = {\n                \"WINNER!\": movieOne.popularity > movieTwo.popularity,\n                \"IT'S A TIE, try again\": movieOne.popularity === movieTwo.popularity,\n                \"LOSER\": movieOne.popularity < movieTwo.popularity\n            }\n            const result = Object.keys(gameConditions).filter(condition => gameConditions[condition])[0]\n            setResult(result)\n        }\n        if (property === 'runtime') {\n            const gameConditions = {\n                \"WINNER!\": movieOne.runtime > movieTwo.runtime,\n                \"IT'S A TIE , try again\": movieOne.runtime === movieTwo.runtime,\n                \"LOSER\": movieOne.runtime < movieTwo.runtime\n            }\n            const result = Object.keys(gameConditions).filter(condition => gameConditions[condition])[0]\n            setResult(result)\n        }\n\n        if (property === 'revenue') {\n            const gameConditions = {\n                \"WINNER!\": movieOne.revenue > movieTwo.revenue,\n                \"IT'S A TIE, , try again\": movieOne.revenue === movieTwo.revenue,\n                \"LOSER\": movieOne.revenue < movieTwo.revenue\n            }\n            const result = Object.keys(gameConditions).filter(condition => gameConditions[condition])[0]\n            setResult(result)\n        }\n\n        if (property === 'budget') {\n            const gameConditions = {\n                \"WINNER!\": movieOne.budget > movieTwo.budget,\n                \"IT'S A TIE, , try again\": movieOne.budget === movieTwo.budget,\n                \"LOSER\": movieOne.budget < movieTwo.budget\n            }\n            const result = Object.keys(gameConditions).filter(condition => gameConditions[condition])[0]\n            setResult(result)\n        }\n\n        if (property === 'release_date') {\n            const gameConditions = {\n                \"WINNER!\": movieOne.release_date < movieTwo.release_date,\n                \"IT'S A TIE, , try again\": movieOne.release_date === movieTwo.release_date,\n                \"LOSER\": movieOne.release_date > movieTwo.release_date\n            }\n            const result = Object.keys(gameConditions).filter(condition => gameConditions[condition])[0]\n            setResult(result)\n        }\n    }\n\n    const showCardTwo = () => setRevealCardTwo(true);\n\n    console.log({ movieOne, movieTwo });\n\n    return (\n        <div className='wrapper'>\n            {rulesIsShown && <RulesBox setRulesIsShown={setRulesIsShown}/>}\n            <div className='title-wrapper'><TitleSection /></div>\n            <div className='card-wrapper'>\n                <Card isShown onButtonClick={showCardTwo} {...movieOne} compareMovieProperty={compareMovieProperty}/>\n                <Card isShown={revealCardTwo} {...movieTwo}/>\n            </div>\n            <div onClick={() => reset()} className='replay'> <p>Play again!</p></div>\n            {result && <div className='results'>Result: {result}</div>}\n        </div>\n\n    )\n};\n\nexport default CardWrapper","\nimport './App.css';\nimport CardWrapper from './components/CardWrapper'\nfunction App() {\n  return (\n    <CardWrapper/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}